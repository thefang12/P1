###An Identifier is not a ReservedWord

ReservedWord:: break + case + catch + continue + debugger + default + do + finally + new+return + throw + try  + var + with + class + const + enum + export + extends + import + super + implements + interface + let + package + private + protected + public + static + yield + null

UnicodeLetter::q+w+e+r+t+y+u+i+o+p+a+s+d+f+g+h+j+k+l+z+x+c+v+b+n+m+Q+W+E+R+T+Y+U+I+O+P+A+S+D+F+G+H+J+K++L+Z+X+C+V+B+N+M

IdentifierStart::UnicodeLetter IdentifierStartPrima + $ IdentifierStartPrima + - IdentifierStartPrima + \ IdentifierStartPrima
IdentifierStartPrima :: UnicodeLetter IdentifierStartPrima + Numbers IdentifierStartPrima

Identifier::IdentifierStartPrima + IdentifierStartPrima Identifier + UnicodeLetter

Number::0+1+2+3+4+5+6+7+8+9

Numbers:: Number + Number Numbers

Decimals::Numbers Decimals + .Decimals + Numbers

HexDigit::0+1+2+3+4+5+6+7+8+9+a+b+c+d+e+f+A+B+C+D+E+F

HexIntegerLiteral:: 0xHexDigit + 0XHexDigit HexIntegerLiteral + HexDigit HexIntegerLiteral + HexDigit

Alphabet:: UnicodeLetter + Numbers + UnicodeLetter Alphabet + Numbers Alphabet

If::if
Else::else
For::for
While::while
ParenthesisIni::(
ParenthesisFin::)
Do::do
Function::function
Switch::switch
BracketsIni::{
BracketsFin::}
Semicolon:: ;
Return::return

This::this

Delete::delete
Void::void
Typeof::typeof
Addition::\+\+
Substraction::--
Plus::+
Minus::-
Denial::!
True::true
False::false
Equal:: =
Coma::,
Colon:: \:


Multiplicative:: * + / + %

Shifts:: << + >> + >>>

Relational:: < + > + <= + >= + instanceof + in

Equality:: == + === + != + !===

Logical:: & + ^ + | + && + ||

Conditional::?

AssignmentOperator:: *=	+ /= + %= + \+= + + -= + <<= + >>= + >>>= + &= + ^= + |=

DobleQuotations::"
SimpleQuotations::'

